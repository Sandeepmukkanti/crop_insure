import { useState } from 'react';
import { useWallet } from '@aptos-labs/wallet-adapter-react';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { useToast } from '../components/ui/use-toast';
import { Shield, User, MapPin, Phone, Mail } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

interface FarmerRegistrationData {
  name: string;
  phone: string;
  email: string;
  address: string;
  farmSize: string;
  primaryCrop: string;
}

export default function FarmerRegistrationPage() {
  const { connected, account } = useWallet();
  const { toast } = useToast();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState<FarmerRegistrationData>({
    name: '',
    phone: '',
    email: '',
    address: '',
    farmSize: '',
    primaryCrop: 'Rice',
  });

  const handleInputChange = (field: keyof FarmerRegistrationData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!connected || !account) {
      toast({
        title: "Wallet Not Connected",
        description: "Please connect your wallet to register as a farmer.",
        variant: "destructive",
      });
      return;
    }

    // Validate form
    const { name, phone, email, address, farmSize } = formData;
    if (!name || !phone || !email || !address || !farmSize) {
      toast({
        title: "Missing Information",
        description: "Please fill in all required fields.",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);

    try {
      // Store farmer registration in localStorage for now
      // In a real app, this would be stored on blockchain or database
      const farmerData = {
        ...formData,
        walletAddress: account.address.toString(),
        registrationDate: new Date().toISOString(),
        isRegistered: true,
      };

      localStorage.setItem(`farmer_${account.address.toString()}`, JSON.stringify(farmerData));
      localStorage.setItem('currentUser', JSON.stringify(farmerData));

      toast({
        title: "Registration Successful! ðŸŽ‰",
        description: "Welcome to CropInsure! Redirecting to your dashboard...",
      });

      // Redirect to farmer dashboard after 2 seconds
      setTimeout(() => {
        navigate('/farmer-dashboard');
      }, 2000);

    } catch (error) {
      console.error('Error registering farmer:', error);
      toast({
        title: "Registration Failed",
        description: "Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  if (!connected) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
        <div className="sm:mx-auto sm:w-full sm:max-w-md">
          <div className="text-center">
            <Shield className="h-12 w-12 text-gray-400 mx-auto" />
            <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
              Connect Your Wallet
            </h2>
            <p className="mt-2 text-sm text-gray-600">
              You need to connect your wallet to register as a farmer
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            ðŸŒ¾ Farmer Registration
          </h1>
          <p className="text-lg text-gray-600">
            Join CropInsure and protect your agricultural investments
          </p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <User className="h-5 w-5 mr-2" />
              Personal Information
            </CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Name */}
              <div>
                <Label htmlFor="name">Full Name *</Label>
                <Input
                  id="name"
                  type="text"
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  placeholder="Enter your full name"
                  required
                />
              </div>

              {/* Phone and Email */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="phone">Phone Number *</Label>
                  <div className="relative">
                    <Phone className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="phone"
                      type="tel"
                      value={formData.phone}
                      onChange={(e) => handleInputChange('phone', e.target.value)}
                      placeholder="+1 234 567 8900"
                      className="pl-10"
                      required
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="email">Email Address *</Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => handleInputChange('email', e.target.value)}
                      placeholder="farmer@example.com"
                      className="pl-10"
                      required
                    />
                  </div>
                </div>
              </div>

              {/* Address */}
              <div>
                <Label htmlFor="address">Farm Address *</Label>
                <div className="relative">
                  <MapPin className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                  <Input
                    id="address"
                    type="text"
                    value={formData.address}
                    onChange={(e) => handleInputChange('address', e.target.value)}
                    placeholder="Street, City, State, ZIP"
                    className="pl-10"
                    required
                  />
                </div>
              </div>

              {/* Farm Details */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="farmSize">Farm Size (acres) *</Label>
                  <Input
                    id="farmSize"
                    type="number"
                    step="0.1"
                    min="0.1"
                    value={formData.farmSize}
                    onChange={(e) => handleInputChange('farmSize', e.target.value)}
                    placeholder="e.g., 25.5"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="primaryCrop">Primary Crop *</Label>
                  <select
                    id="primaryCrop"
                    value={formData.primaryCrop}
                    onChange={(e) => handleInputChange('primaryCrop', e.target.value)}
                    className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-green-500 focus:outline-none focus:ring-1 focus:ring-green-500"
                    required
                  >
                    <option value="Rice">Rice</option>
                    <option value="Wheat">Wheat</option>
                    <option value="Corn">Corn</option>
                    <option value="Soybeans">Soybeans</option>
                    <option value="Cotton">Cotton</option>
                    <option value="Sugarcane">Sugarcane</option>
                    <option value="Barley">Barley</option>
                    <option value="Oats">Oats</option>
                    <option value="Other">Other</option>
                  </select>
                </div>
              </div>

              {/* Wallet Address Info */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p className="text-blue-800 font-semibold mb-2">ðŸ“± Connected Wallet</p>
                <code className="text-sm text-blue-700 break-all">
                  {account.address.toString()}
                </code>
                <p className="text-xs text-blue-600 mt-1">
                  This wallet will be linked to your farmer account
                </p>
              </div>

              {/* Terms */}
              <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                <p className="text-sm text-gray-700">
                  <strong>By registering, you agree to:</strong>
                </p>
                <ul className="text-sm text-gray-600 mt-2 space-y-1 list-disc list-inside">
                  <li>Provide accurate information about your farm</li>
                  <li>Use the platform responsibly</li>
                  <li>Pay premiums on time for active policies</li>
                  <li>Submit genuine claims only</li>
                </ul>
              </div>

              <Button
                type="submit"
                className="w-full bg-green-600 hover:bg-green-700"
                disabled={loading}
              >
                {loading ? 'Registering...' : 'Complete Registration'}
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
